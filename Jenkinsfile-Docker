pipeline {
    agent any

    tools {
        jdk 'JDK21'
        maven 'Maven_3.9.6'
    }

    environment {
        JAR_NAME = "testproject-0.0.1-SNAPSHOT.jar"
        APP_PORT = "8085"
        HOST_PORT = "8082"
        DB_HOST = "team_1_dev_1_postgres"
        DB_USER = "team_1_user"
        DB_PASS = "team_1_pass"
        DB_NAME = "team_1_db"
        DB_URL = "jdbc:postgresql://${DB_HOST}:5432/${DB_NAME}"
        
        // Docker configuration
        IMAGE_NAME = "springboot-app"
        CONTAINER_NAME = "springboot-app"
        NETWORK = "jenkins-net"
    }

    parameters {
        choice(
            name: 'DOCKER_STRATEGY',
            choices: ['Type1-VolumeMount', 'Type2-Dockerfile'],
            description: 'Choose Docker deployment strategy'
        )
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "📦 Checking out code from GitHub..."
                git branch: 'main', url: 'https://github.com/vking6007/testproject.git'
            }
        }

        stage('Build JAR') {
            steps {
                echo "⚙️ Building Spring Boot JAR..."
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Stop Previous Container') {
            steps {
                echo "🛑 Stopping previous container if running..."
                sh '''
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                '''
            }
        }

        stage('Deploy with Docker') {
            steps {
                script {
                    if (params.DOCKER_STRATEGY == 'Type1-VolumeMount') {
                        echo "🐳 Type 1: Build Outside, Run Inside (Volume Mount)"
                        sh '''
                            echo "🚀 Starting Spring Boot container with volume mount..."
                            docker run -d \
                              --name ${CONTAINER_NAME} \
                              --network ${NETWORK} \
                              -p ${HOST_PORT}:${APP_PORT} \
                              -v $(pwd)/target:/app \
                              -e SPRING_PROFILES_ACTIVE=dev \
                              -e SPRING_DATASOURCE_URL=${DB_URL} \
                              -e SPRING_DATASOURCE_USERNAME=${DB_USER} \
                              -e SPRING_DATASOURCE_PASSWORD=${DB_PASS} \
                              openjdk:21-jdk-slim \
                              bash -c "java -jar /app/${JAR_NAME}"
                        '''
                    } else {
                        echo "🐳 Type 2: Build Inside Container (Dockerfile)"
                        sh '''
                            echo "🔨 Building Docker image..."
                            docker build -t ${IMAGE_NAME} .
                            
                            echo "🚀 Starting Spring Boot container..."
                            docker run -d \
                              --name ${CONTAINER_NAME} \
                              --network ${NETWORK} \
                              -p ${HOST_PORT}:${APP_PORT} \
                              -e SPRING_PROFILES_ACTIVE=dev \
                              -e SPRING_DATASOURCE_URL=${DB_URL} \
                              -e SPRING_DATASOURCE_USERNAME=${DB_USER} \
                              -e SPRING_DATASOURCE_PASSWORD=${DB_PASS} \
                              ${IMAGE_NAME}
                        '''
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                echo "🕒 Waiting for app to initialize..."
                sh 'sleep 20'

                echo "🔍 Verifying container status..."
                sh '''
                    if ! docker ps | grep ${CONTAINER_NAME} > /dev/null; then
                        echo "❌ Container is not running!"
                        docker logs ${CONTAINER_NAME}
                        exit 1
                    fi
                '''

                echo "🌐 Checking health endpoint..."
                sh '''
                    if ! curl -f http://localhost:${HOST_PORT}/api/test/health; then
                        echo "⚠️ Health check failed, but container is running."
                        docker logs ${CONTAINER_NAME} | tail -20
                    fi
                '''

                echo "📊 Container details:"
                sh 'docker ps | grep ${CONTAINER_NAME}'
            }
        }
    }

    post {
        success {
            echo "🎉 Deployment successful!"
            echo "🌍 App running on: http://localhost:${HOST_PORT}"
            echo "📋 Container logs: docker logs -f ${CONTAINER_NAME}"
            echo "🔍 Container status: docker ps | grep ${CONTAINER_NAME}"
        }

        failure {
            echo "❌ Deployment failed. Fetching logs..."
            sh 'docker logs ${CONTAINER_NAME} || true'
        }

        always {
            echo "✅ Jenkins Pipeline completed."
        }
    }
}
